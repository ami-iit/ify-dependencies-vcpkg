name: CI

on:
  push:
  pull_request:
  release:
    types: [published]

env:
  vcpkg_TAG: 6d36e2a86baf8d227fc6dce587bd69997d67fb5e

jobs:
  build:
    # We would like to build with v140 toolset to be compatible with both VS2017, 2019
    # But that will only be avaiilable in late november: https://github.com/actions/virtual-environments/issues/68
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build_type: [Release]
        os: [windows-2019, macOS-latest, ubuntu-latest]

    steps:
    - uses: actions/checkout@v1

    - name: Check free space
      shell: bash
      run: |
        df -h

    # Workaround for https://github.community/t5/GitHub-Actions/Windows-tests-worked-yesterday-broken-today/td-p/43574
    - name: Override bash shell PATH (windows-latest)
      if: matrix.os == 'windows-2019'
      run: echo "::add-path::C:\Program Files\Git\bin"

    # Remove apt repos that are known to break from time to time
    # See https://github.com/actions/virtual-environments/issues/323
    - name: Remove broken apt repos [Ubuntu]
      if: matrix.os == 'ubuntu-latest'
      run: |
        for apt_file in `grep -lr microsoft /etc/apt/sources.list.d/`; do sudo rm $apt_file; done

    - name: Free disk space
      # https://github.com/actions/virtual-environments/issues/709
      if: matrix.os == 'ubuntu-latest'
      run: |
        sh ./.github/workflows/free_disk_space.sh
        df -h

    - name: Download custom vcpkg and additional ports [Windows]
      if: matrix.os == 'windows-2019'
      shell: bash
      run: |
        choco install -y wget
        mkdir C:/ify-deps
        cd C:/ify-deps
        cd /c/ify-deps
        git clone https://github.com/Microsoft/vcpkg
        cd vcpkg
        git checkout ${vcpkg_TAG}
        ./bootstrap-vcpkg.sh

    - name: Download dependencies [macOS]
      if: matrix.os == 'macOS-latest'
      shell: bash
      run: |
        brew install p7zip

    - name: Download dependencies [linux]
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install build-essential cmake perl python git p7zip '^libxcb.*-dev' libx11-xcb-dev libglu1-mesa-dev libxrender-dev libxi-dev libxkbcommon-dev libxkbcommon-x11-dev flex bison gperf libicu-dev libxslt-dev ruby

    - name: Download custom vcpkg and additional ports [macOS / linux]
      if: (matrix.os == 'macOS-latest' || matrix.os == 'ubuntu-latest')
      shell: bash
      run: |
        mkdir ify-deps
        cd ify-deps
        git clone https://github.com/Microsoft/vcpkg
        cd vcpkg
        git checkout ${vcpkg_TAG}
        ./bootstrap-vcpkg.sh


    - name: Install vcpkg ports [Windows]
      if: matrix.os == 'windows-2019'
      shell: bash
      run: |
        /c/ify-deps/vcpkg/vcpkg.exe install --triplet x64-windows-static catch2 qt5-base[latest] qt5-serialport qt5-tools

    - name: Install vcpkg ports [macOS]
      if: matrix.os == 'macOS-latest'
      shell: bash
      run: |
        ./ify-deps/vcpkg/vcpkg install --triplet x64-osx catch2 qt5-base[latest] qt5-serialport qt5-tools

    - name: Install vcpkg ports (1/2) [linux]
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        ./ify-deps/vcpkg/vcpkg install --triplet x64-linux catch2 qt5-base[latest] qt5-serialport
        df -h
        rm -rf ./ify-deps/vcpkg/buildtrees
        rm -rf ./ify-deps/vcpkg/packages
        rm -rf ./ify-deps/vcpkg/downloads
        df -h
        ./ify-deps/vcpkg/vcpkg install --triplet x64-linux qt5-tools
        df -h
     
    - name: Remove useless files [linux]
      if: matrix.os == 'ubuntu-latest'
      shell: bash
      run: |
        df -h
        rm -rf ./ify-deps/vcpkg/buildtrees
        rm -rf ./ify-deps/vcpkg/packages
        rm -rf ./ify-deps/vcpkg/downloads
        df -h
        
    - name: Install vcpkg ports - qt5-tools (2/2) [linux]
      if: matrix.os == 'ubuntu-latest'
      shell: bash     
      run: |
        ./ify-deps/vcpkg/vcpkg install --triplet x64-linux qt5-tools   
     
    # Remove temporary files https://github.com/Microsoft/vcpkg/blob/master/docs/about/faq.md#how-can-i-remove-temporary-files
    # For some reason doing using git bash to do rm -rf fails for icu's port buildtrees, probably for the use of msys2
    # See https://github.com/microsoft/vcpkg/issues/10365
    - name: Cleanup vcpkg temporary directories [Windows]
      if: matrix.os == 'windows-2019'
      shell: cmd
      run: |
        RMDIR /Q/S C:\ify-deps\vcpkg\buildtrees
        RMDIR /Q/S C:\ify-deps\vcpkg\packages
        RMDIR /Q/S C:\ify-deps\vcpkg\downloads

    - name: Cleanup vcpkg temporary directories [macOS / linux]
      if: (matrix.os == 'macOS-latest' || matrix.os == 'ubuntu-latest')
      shell: bash
      run: |
        rm -rf ./ify-deps/vcpkg/buildtrees
        rm -rf ./ify-deps/vcpkg/packages
        rm -rf ./ify-deps/vcpkg/downloads

    - name: Prepare release file [Windows]
      if: (github.event_name == 'release' &&  matrix.os == 'windows-2019')
      shell: cmd
      run: |
        7z a ify-deps-x64-windows-static.zip C:\ify-deps

    - name: Prepare release file [macOS]
      if: (github.event_name == 'release' &&  matrix.os == 'macOS-latest')
      shell: bash
      run: |
        7z a ify-deps-x64-osx.zip ./ify-deps

    - name: Prepare release file [linux]
      if: (github.event_name == 'release' &&  matrix.os == 'ubuntu-latest')
      shell: bash
      run: |
        7z a ify-deps-x64-linux.zip ./ify-deps

    - name: Upload Release Asset [Windows]
      if: (github.event_name == 'release' &&  matrix.os == 'windows-2019')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./ify-deps-x64-windows-static.zip
          asset_name: ify-deps-x64-windows-static.zip
          asset_content_type: application/zip

    - name: Upload Release Asset [macOS]
      if: (github.event_name == 'release' &&  matrix.os == 'macOS-latest')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./ify-deps-x64-osx.zip
          asset_name: ify-deps-x64-osx.zip
          asset_content_type: application/zip


    - name: Upload Release Asset [linux]
      if: (github.event_name == 'release' &&  matrix.os == 'ubuntu-latest')
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./ify-deps-x64-linux.zip
          asset_name: ify-deps-x64-linux.zip
          asset_content_type: application/zip
